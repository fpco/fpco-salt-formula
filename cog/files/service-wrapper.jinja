#!/usr/bin/env python
import sys
from docker import Client
cli = Client(base_url='unix://var/run/docker.sock')
cli.containers()
repo = '{{ docker_repo }}'
tag = '{{ docker_tag }}'
image = '%s:%s' % (repo, tag)
service_name = '{{ cname }}'
ip = '{{ ip }}'
volume_mounts = [{% for k,v in volumes.items() %}'{{ k }}:{{ v }}', {% endfor %}]
port_bindings = { {% for p in ports %}{{ p }}: ('{{ ip }}', {{ p }}), {% endfor %} }
post_list = [{% for p in ports %}'{{ p }}', {% endfor %}]
host_config = cli.create_host_config(binds=volume_mounts,
                                     port_bindings=port_bindings)
env = { {%- for k,v in envvars.items() %}
          '{{ k }}': '{{ v }}',
        {%- endfor %}
}
cmd = '{{ cmd }}'
print 'attempt to pull %s' % image
try: cli.pull(repository=repo, tag=tag, stream=False)
except: sys.exit()
print 'attempt to stop a running container/instance, if it exists'
try: cli.stop(service_name)
except: print 'skip stop, running container not found'
print 'attempt to remove an existing container, if it exists'
try: cli.remove_container(container=service_name, force=True)
except: print 'skip rm, existing/old container not found'
print 'attempt to create a new container..'
container = cli.create_container(image=image, detach=True, name=service_name,
                                 ports=port_list, environment=env,
                                 host_config=host_config, entrypoint=cmd)
print 'created %s' % container
id=container.get('Id')
print 'attempt to start that container (%s)' % id
cli.start(container=id, network_mode='host')
print 'retrieve and print stdout/err...'
for msg in cli.logs(container=service_name, stream=True, stdout=True, stderr=True):
    print msg
